{"id":"../node_modules/core-js-pure/internals/to-primitive.js","dependencies":[{"name":"F:\\Project\\20projects\\custom-video-player\\package.json","includedInParent":true,"mtime":1595593531120},{"name":"F:\\Project\\20projects\\custom-video-player\\.babelrc","includedInParent":true,"mtime":1595591612360},{"name":"F:\\Project\\20projects\\custom-video-player\\node_modules\\core-js-pure\\package.json","includedInParent":true,"mtime":1595590366063},{"name":"../internals/is-object","loc":{"line":1,"column":23},"parent":"F:\\Project\\20projects\\custom-video-player\\node_modules\\core-js-pure\\internals\\to-primitive.js","resolved":"F:\\Project\\20projects\\custom-video-player\\node_modules\\core-js-pure\\internals\\is-object.js"}],"generated":{"js":"var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/core-js-pure/internals/to-primitive.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}}],"sources":{"../node_modules/core-js-pure/internals/to-primitive.js":"var isObject = require('../internals/is-object');\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n"},"lineCount":15}},"error":null,"hash":"9c65664e4939e5e53de1ce25eec6cf6d","cacheData":{"env":{}}}